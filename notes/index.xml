<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Notes on Lroolle</title>
    <link>http://lroolle.com/notes/</link>
    <description>Recent content in Notes on Lroolle</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Tue, 20 Oct 2020 13:18:00 +0800</lastBuildDate>
    
	<atom:link href="http://lroolle.com/notes/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Words 20000</title>
      <link>http://lroolle.com/notes/words-20000/</link>
      <pubDate>Tue, 20 Oct 2020 13:18:00 +0800</pubDate>
      
      <guid>http://lroolle.com/notes/words-20000/</guid>
      <description>1Words 20000 2-cess -ceed -cede -gress -grad -gred: to go/step/degree/walk  2.1access (ac|cess ækses) 2.2process (pro|cess ˈprɑːses) 2.3procession (pro|ces|sion prəseʃən) 2.4proceed (pro|ceed proʊˈsiːd) 2.5precede (pre|cede prɪsiːd ) 2.6exceed (ex|ceed ɪkˈsiːd) 2.7recede (re|cede rɪˈsiːd) 2.8procedure 2.9cease(ceas|e [cess] siːs) 2.10progress 2.11aggress 2.12graduate 2.13gradation 2.14gradient 2.15ingredient    1Words 20000 This is a detailed explained and exampled notes taken during conquering 20000 English words, by learning from &amp;ldquo;Online Etymology Dictionary | Origin, history and meaning of English words&amp;rdquo;, also, here is a none licensed but perfect free &amp;ldquo;Online Course from bilibili.</description>
    </item>
    
    <item>
      <title>Scheduling in GO</title>
      <link>http://lroolle.com/notes/scheduling-in-go/</link>
      <pubDate>Sun, 09 Aug 2020 00:00:00 +0800</pubDate>
      
      <guid>http://lroolle.com/notes/scheduling-in-go/</guid>
      <description>It’s important to have a general and representative understanding of how both the OS and Go schedulers work to design your multithreaded software correctly.
- by The Author: ardan-bkennedy (William Kennedy) · GitHub
  Original Posts:
 Scheduling In Go : Part I - OS Scheduler Scheduling In Go : Part II - Go Scheduler Scheduling In Go : Part III - Concurrency   Part I - Os Scheduler What is Executing?</description>
    </item>
    
    <item>
      <title>English Grammar Digest</title>
      <link>http://lroolle.com/notes/english-grammar-digest/</link>
      <pubDate>Fri, 07 Aug 2020 00:00:00 +0800</pubDate>
      
      <guid>http://lroolle.com/notes/english-grammar-digest/</guid>
      <description>English Grammar Digest:english: 问题一：是否对英语语法体系有 整体认知 ？ 问题二：为什么学语法？ 基本句式  简单句及谓语动词 复合句 And 复杂句   词类  同一句型不同词类 十大词类 句子成分 vs 词类 谓语动词“三大本领” 谓语动词 vs 非谓语动词   核心：动词 结语 Verb Moods  回顾：英语动词 动词语气    English Grammar Digest  Grammar can be tough!!
 问题一：是否对英语语法体系有 整体认知 ？ 问题二：为什么学语法？ 所有的语法只有一个目的：造句。
基本句式 简单句及谓语动词  简单句(Simple Sentences)  什么 + 怎么样  句子成分(Parts of Speech) 两个最基本的句子成分是：  什么？ 怎么样？ 主语(Subject) + 谓语(Predicate)  几乎所有的英语句式都是  人或物 动作“干了什么”-&amp;gt;(Verbs) 主语 + 谓语   有哪些“动作”(动词)？</description>
    </item>
    
    <item>
      <title>MacOS Catalina GDB Setup</title>
      <link>http://lroolle.com/notes/macos-catalina-gdb-setup/</link>
      <pubDate>Tue, 07 Jul 2020 00:00:00 +0800</pubDate>
      
      <guid>http://lroolle.com/notes/macos-catalina-gdb-setup/</guid>
      <description>1Install GDB:gdb: 2Cerfificate 3Codesign 4Change default GDB bin 5Create .gdbinit 6References  The Codesigned:
 (please check gdb is codesigned - see taskgated(8))
 1Install GDB brew install gdb 2Cerfificate -&amp;gt; Keychain access -&amp;gt; Certificate assistance -&amp;gt; Create a certificate
 Name: gdb Identity Type: Self Signed Root Certificate Type: Code Signing  Let me override defaults    -&amp;gt; continue -&amp;gt; until &amp;ldquo;Specify a Location for Certificate&amp;rdquo;</description>
    </item>
    
    <item>
      <title>Effective Go</title>
      <link>http://lroolle.com/notes/effective-go/</link>
      <pubDate>Sun, 07 Jun 2020 00:00:00 +0800</pubDate>
      
      <guid>http://lroolle.com/notes/effective-go/</guid>
      <description>1Formatting 2Commentary 3Names  3.1Package Names 3.2Getters 3.3Interface names 3.4MixedCaps   4Semicolons 5Control structures  5.1If 5.2Redeclaration and reassignment 5.3For 5.4Switch   6Functions  6.1Multiple return values 6.2Named result parameters 6.3Defer   7Data  7.1Allocation with new 7.2Constructors and composite literals 7.3Allocation with make 7.4Arrays 7.5Slices 7.6Two-dimensional slices 7.7Map 7.8Printing 7.9Append   8Initialization  8.1Constants 8.2Variables 8.3The init Function   9Methods  9.1TODOPointers vs. Values   10Interfaces and other types  10.</description>
    </item>
    
    <item>
      <title>The Go Programming Language Specification</title>
      <link>http://lroolle.com/notes/golang-spec/</link>
      <pubDate>Sun, 07 Jun 2020 00:00:00 +0800</pubDate>
      
      <guid>http://lroolle.com/notes/golang-spec/</guid>
      <description>1Keywords 2Types  2.1Boolean 2.2String 2.3Numeric 2.4Type Convert 2.5Array 2.6Slice 2.7Struct 2.8Pointer 2.9Func 2.10Interface 2.11Map 2.12Channel   3Declarations and scope ¶  3.1Constant 3.2Type declarations 3.3Variable declarations 3.4Function declarations 3.5Method declarations   4make &amp;amp; new 5References  1Keywords break default func interface select case defer go map struct chan else goto package switch const fallthrough if range type continue for import return var 2Types 2.1Boolean import &amp;#34;fmt&amp;#34; func main() { var ToBe bool fmt.</description>
    </item>
    
  </channel>
</rss>